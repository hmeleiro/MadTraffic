fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
shp$nivelServicio
pal2 <- colorFactor(
palette = c('red', 'blue', 'green', 'purple', 'orange'),
domain = shp$nivelServicio
)
shp$popup <- paste(
"Nombre:", shp$nombre, "<br>",
"Carga:", shp$carga, "<br>",
"Nivel servicio:", shp$nivelServicio
)
shp %>%
leaflet() %>%
addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png") %>%  # Add default OpenStreetMap map tiles
addPolygons(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
fillOpacity = 1,
smoothFactor = 1, weight = 3, opacity = 0.8)
url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
dataRealTime <- readRealTime(url)
df_sf <- st_as_sf(dataRealTime, coords = c("st_x", "st_y"), crs = "+proj=utm +zone=30")
#Projection transformation
sfc = st_transform(df_sf, crs = "+proj=longlat +datum=WGS84")
pal <- colorNumeric(
palette = 'Dark2',
domain = sfc$carga
)
pal2 <- colorFactor(
palette = c('red', 'blue', 'green', 'purple', 'orange'),
domain = shp$nivelServicio
)
sfc$popup <- paste(
"Nombre:", shp$nombre, "<br>",
"Carga:", shp$carga, "<br>",
"Nivel servicio:", shp$nivelServicio
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
df_sf <- st_as_sf(dataRealTime, coords = c("st_x", "st_y"), crs = "+proj=utm +zone=30")
#Projection transformation
sfc = st_transform(df_sf, crs = "+proj=longlat +datum=WGS84")
pal <- colorNumeric(
palette = 'Dark2',
domain = sfc$carga
)
pal2 <- colorFactor(
palette = c('red', 'blue', 'green', 'purple', 'orange'),
domain = sfc$nivelServicio
)
sfc$popup <- paste(
"Nombre:", sfc$nombre, "<br>",
"Carga:", sfc$carga, "<br>",
"Nivel servicio:", sfc$nivelServicio
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
pal2 <- colorFactor(
palette = "reds",
domain = sfc$nivelServicio
)
sfc$popup <- paste(
"Nombre:", sfc$nombre, "<br>",
"Carga:", sfc$carga, "<br>",
"Nivel servicio:", sfc$nivelServicio
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
pal2 <- colorFactor(
palette = "reds",
domain = sfc$nivelServicio, reverse = T
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
pal2 <- colorFactor(
palette = "reds",
domain = sfc$nivelServicio, reverse = F
)
sfc$popup <- paste(
"Nombre:", sfc$nombre, "<br>",
"Carga:", sfc$carga, "<br>",
"Nivel servicio:", sfc$nivelServicio
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
pal2 <- colorFactor(
palette = "Reds",
domain = sfc$nivelServicio, reverse = F
)
sfc$popup <- paste(
"Nombre:", sfc$nombre, "<br>",
"Carga:", sfc$carga, "<br>",
"Nivel servicio:", sfc$nivelServicio
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
Sys.getenv("MADTRAFFIC_USER")
Sys.getenv("MADTRAFFIC_PASS")
library(XML)
library(dplyr)
library(readr)
library(stringr)
connectSQL <- function() {
require(RMariaDB)
require(DBI)
drv <- dbDriver("MariaDB")
con <- dbConnect(
drv = drv,
username = Sys.getenv("MADTRAFFIC_USER"),
password = Sys.getenv("MADTRAFFIC_PASS"),
host = "82.223.196.145",
port = "3306",
dbname = "MadTraffic"
)
return(con)
}
loadToDB <- function(file, con) {
data <- read_csv2(file, show_col_types = FALSE)
DBI::dbWriteTable(con, "traffic_data", data)
}
files <- list.files("data/historico/", full.names = T, pattern = "zip")
file <- files[1]
data <- read_csv2(file, show_col_types = FALSE)
data <- data[1,]
DBI::dbWriteTable(con, "traffic_data", data)
con
con <- connectSQL()
DBI::dbWriteTable(con, "traffic_data", data)
dbDisconnect(con)
data <- read_csv2(file, show_col_types = FALSE)
unique(data$tipo)
library(XML)
library(dplyr)
library(readr)
library(stringr)
library(sf)
library(ggplot2)
library(leaflet)
readRealTime <- function(url) {
tmp <- tempfile()
download.file(url, tmp)
x <- xmlToDataFrame(tmp)
timestamp <- x$text[1]
x <- x[-1,]
x$timestamp <- timestamp
x$text <- NULL
x <- x %>%
mutate(
across(c(intensidad:carga, intensidadSat, velocidad), as.numeric),
across(st_x:st_y, function(x){as.numeric(str_replace(x, ",", "."))}),
timestamp = as.POSIXct(timestamp, format = "%d/%m/%Y %H:%M:%S"),
nivelServicio = factor(nivelServicio, c("-1", "0", "1", "2", "3", ""))
)
return(x)
}
url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
dataRealTime <- readRealTime(url)
df_sf <- st_as_sf(dataRealTime, coords = c("st_x", "st_y"), crs = "+proj=utm +zone=30")
#Projection transformation
sfc = st_transform(df_sf, crs = "+proj=longlat +datum=WGS84")
pal <- colorNumeric(
palette = 'Dark2',
domain = sfc$carga
)
pal2 <- colorFactor(
palette = c("gray60", "#00c300", "#7af160", "#f5d000", "#cc0000", "gray30"),
domain = sfc$nivelServicio, reverse = F
)
sfc$popup <- paste(
"Nombre:", sfc$nombre, "<br>",
"Carga:", sfc$carga, "<br>",
"Nivel servicio:", sfc$nivelServicio
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
# url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
# dataRealTime <- readRealTime(url) %>% mutate(id = as.numeric(idelem))
#
# shp <- read_sf("data/pmed_ubicacion_06-2022/pmed_ubicacion_06-2022.shp")
# shp <- st_transform(shp, crs = "+proj=longlat +datum=WGS84")
# # shp <- st_point_on_surface(shp)
#
#
# shp <- merge(shp, dataRealTime, by = "id")
#
# # If you want to use predefined palettes in the RColorBrewer package:
# # Call RColorBrewer::display.brewer.all() to see all possible palettes
# pal <- colorNumeric(
#   palette = 'Dark2',
#   domain = shp$carga
# )
#
# pal2 <- colorFactor(
#   palette = c('red', 'blue', 'green', 'purple', 'orange'),
#   domain = shp$nivelServicio
# )
#
# shp$popup <- paste(
#   "Nombre:", shp$nombre, "<br>",
#   "Carga:", shp$carga, "<br>",
#   "Nivel servicio:", shp$nivelServicio
# )
#
# shp %>%
#   leaflet() %>%
#   addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png") %>%  # Add default OpenStreetMap map tiles
#   addPolygons(popup = ~popup,
#               fillColor = ~pal2(nivelServicio),
#               color = ~pal2(nivelServicio),
#               fill = T,
#               stroke = T,
#               fillOpacity = 1,
#               smoothFactor = 1, weight = 3, opacity = 0.8)
glimpse(sfc)
sfc$popup <- paste(
"Nombre:", sfc$descripcion, "<br>",
"Carga:", sfc$carga, "<br>",
"Nivel servicio:", sfc$nivelServicio
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
glimpse(sfc)
url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
xmlParse(url)
readRealTime <- function(url) {
tmp <- tempfile()
download.file(url, tmp, mode = "wb")
x <- xmlToDataFrame(tmp)
timestamp <- x$text[1]
x <- x[-1,]
x$timestamp <- timestamp
x$text <- NULL
x <- x %>%
mutate(
across(c(intensidad:carga, intensidadSat, velocidad), as.numeric),
across(st_x:st_y, function(x){as.numeric(str_replace(x, ",", "."))}),
timestamp = as.POSIXct(timestamp, format = "%d/%m/%Y %H:%M:%S"),
nivelServicio = factor(nivelServicio, c("-1", "0", "1", "2", "3", ""))
)
return(x)
}
url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
dataRealTime <- readRealTime(url)
glimpse(dataRealTime)
url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
tmp <- tempfile()
download.file(url, tmp, mode = "wb")
xmlParse(url)
xmlParse(tmp)
xmlParse(tmp) %>% XML::xmlToDataFrame()
xmlParse(tmp) %>% XML::xmlToDataFrame() %>% glimpse()
guess_encoding(tmp)
xmlParse(tmp, encoding = "UTF-8") %>% XML::xmlToDataFrame() %>% glimpse()
url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
tmp <- tempfile()
download.file(url, tmp, mode = "wb")
xmlParse(tmp, encoding = "UTF-8") %>% XML::xmlToDataFrame() %>% glimpse()
xmlParse(tmp, encoding = "windows-1252") %>% XML::xmlToDataFrame() %>% glimpse()
xmlParse(tmp, encoding = "windows-1250") %>% XML::xmlToDataFrame() %>% glimpse()
getEncoding(tmp)
xmlParse(tmp) %>% getEncoding()
xml2::read_xml(url)
xml2::read_xml(url) %>% as.data.frame()
xml2::read_xml(url)
install.packages("xmlconvert")
xmlconvert::xml_to_df(tmp)
xmlconvert::xml_to_df(file = tmp)
xml2::read_xml(url)
xml2::read_xml(url) %>% XML::xmlToDataFrame()
xmlParse(url, isURL = T)
xmlParse(tmp)
x <- xmlParse(tmp)
x[1]
x[[1]]
str(x)
x
x %>% head()
XML::
xmlconvert::xml_to_df(file = x)
xml2::read_xml(url)
xml2::read_xml(url) %>% as_tibble()
xml2::read_xml(url) %>% as.list() %>%  as_tibble()
xml2::read_xml(url) %>% xml2::as_list() %>%  as_tibble()
xml2::read_xml(url) %>% xml2::as_list() %>%  as_tibble() %>% unnest_longer(DATA)
XML::
xml2::read_xml(url) %>% xml2::as_list() %>%  as_tibble() %>% unnest_longer()
XML::
xml2::read_xml(url) %>% xml2::as_list() %>%  as_tibble() %>% tidyr::unnest_longer()
XML::
xml2::read_xml(url) %>% xml2::as_list() %>%  as_tibble() %>% tidyr::unnest_longer(pms)
XML::
xml2::read_xml(url) %>% xml2::as_list() %>%  as_tibble() %>% tidyr::unnest_wider(pms)
XML::
xml2::read_xml(url) %>% xml2::as_list() %>%  as_tibble() %>% tidyr::unnest_longer(pms) %>% tidyr::unnest_wider(pms)
xmlToDataFrame(tmp)
library(XML)
library(dplyr)
library(readr)
library(stringr)
library(sf)
library(ggplot2)
library(leaflet)
readRealTime <- function(url) {
tmp <- tempfile()
download.file(url, tmp, mode = "wb")
x <- xmlToDataFrame(tmp)
timestamp <- x$text[1]
x <- x[-1,]
x$timestamp <- timestamp
x$text <- NULL
x <- x %>%
mutate(
across(c(intensidad:carga, intensidadSat, velocidad), as.numeric),
across(st_x:st_y, function(x){as.numeric(str_replace(x, ",", "."))}),
timestamp = as.POSIXct(timestamp, format = "%d/%m/%Y %H:%M:%S"),
nivelServicio = factor(nivelServicio, c("-1", "0", "1", "2", "3", ""))
)
return(x)
}
url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
dataRealTime <- readRealTime(url)
df_sf <- st_as_sf(dataRealTime, coords = c("st_x", "st_y"), crs = "+proj=utm +zone=30")
#Projection transformation
sfc = st_transform(df_sf, crs = "+proj=longlat +datum=WGS84")
pal <- colorNumeric(
palette = 'Dark2',
domain = sfc$carga
)
pal2 <- colorFactor(
palette = c("gray60", "#00c300", "#7af160", "#f5d000", "#cc0000", "gray30"),
domain = sfc$nivelServicio, reverse = F
)
sfc$popup <- paste(
"Nombre:", sfc$descripcion, "<br>",
"Carga:", sfc$carga, "<br>",
"Nivel servicio:", sfc$nivelServicio
)
# tiles_url <- "https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}"
# tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png"
tiles_url <- "https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png"
sfc %>%
leaflet() %>%
addTiles(urlTemplate = tiles_url) %>%  # Add default OpenStreetMap map tiles
addCircles(popup = ~popup,
fillColor = ~pal2(nivelServicio),
color = ~pal2(nivelServicio),
fill = T,
stroke = T,
weight = 1.5,
fillOpacity = 0.7,
opacity = 0.7)
# url <- "https://informo.madrid.es/informo/tmadrid/pm.xml"
# dataRealTime <- readRealTime(url) %>% mutate(id = as.numeric(idelem))
#
# shp <- read_sf("data/pmed_ubicacion_06-2022/pmed_ubicacion_06-2022.shp")
# shp <- st_transform(shp, crs = "+proj=longlat +datum=WGS84")
# # shp <- st_point_on_surface(shp)
#
#
# shp <- merge(shp, dataRealTime, by = "id")
#
# # If you want to use predefined palettes in the RColorBrewer package:
# # Call RColorBrewer::display.brewer.all() to see all possible palettes
# pal <- colorNumeric(
#   palette = 'Dark2',
#   domain = shp$carga
# )
#
# pal2 <- colorFactor(
#   palette = c('red', 'blue', 'green', 'purple', 'orange'),
#   domain = shp$nivelServicio
# )
#
# shp$popup <- paste(
#   "Nombre:", shp$nombre, "<br>",
#   "Carga:", shp$carga, "<br>",
#   "Nivel servicio:", shp$nivelServicio
# )
#
# shp %>%
#   leaflet() %>%
#   addTiles(urlTemplate = "https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png") %>%  # Add default OpenStreetMap map tiles
#   addPolygons(popup = ~popup,
#               fillColor = ~pal2(nivelServicio),
#               color = ~pal2(nivelServicio),
#               fill = T,
#               stroke = T,
#               fillOpacity = 1,
#               smoothFactor = 1, weight = 3, opacity = 0.8)
library(dplyr)
library(arrow)
sources <- list.files("data/historico/")
sources
sources <- list.files("data/historico/", pattern = ".zip")
sources
sources <- sources[1:3]
readr::read_csv("data/historico/07-2013.csv")
x <- open_dataset(sources, delimiter = ";")
x <- open_dataset(unz("data/historico/208627-0.zip"), delimiter = ";")
unz("data/historico/208627-0.zip")
zipfile <- "data/historico/208627-0.zip"
unzip(zipfile, list = T)
files <- unzip(zipfile, list = T)
x <- open_dataset(unz(zipfile, files$Name[1]), delimiter = ";")
zipfile
files$Name[1]
zipfile
unz(zipfile, files$Name[1])
x <- open_dataset(unz(zipfile, files$Name[1]), delimiter = ";")
unz(zipfile, files$Name[1])
